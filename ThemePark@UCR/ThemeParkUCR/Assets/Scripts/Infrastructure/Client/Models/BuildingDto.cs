// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class BuildingDto : IParsable 
    {
        /// <summary>The buildingAcronym property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildingAcronym { get; set; }
#nullable restore
#else
        public string BuildingAcronym { get; set; }
#endif
        /// <summary>The buildingId property</summary>
        public Guid? BuildingId { get; set; }
        /// <summary>The buildingName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildingName { get; set; }
#nullable restore
#else
        public string BuildingName { get; set; }
#endif
        /// <summary>The campusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CampusName { get; set; }
#nullable restore
#else
        public string CampusName { get; set; }
#endif
        /// <summary>The centerX property</summary>
        public double? CenterX { get; set; }
        /// <summary>The centerY property</summary>
        public double? CenterY { get; set; }
        /// <summary>The height property</summary>
        public double? Height { get; set; }
        /// <summary>The length property</summary>
        public double? Length { get; set; }
        /// <summary>The levelCount property</summary>
        public int? LevelCount { get; set; }
        /// <summary>The roofColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? RoofColor { get; set; }
#nullable restore
#else
        public string RoofColor { get; set; }
#endif
        /// <summary>The rotation property</summary>
        public double? Rotation { get; set; }
        /// <summary>The siteName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SiteName { get; set; }
#nullable restore
#else
        public string SiteName { get; set; }
#endif
        /// <summary>The universityName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniversityName { get; set; }
#nullable restore
#else
        public string UniversityName { get; set; }
#endif
        /// <summary>The wallsColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? WallsColor { get; set; }
#nullable restore
#else
        public string WallsColor { get; set; }
#endif
        /// <summary>The width property</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BuildingDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BuildingDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BuildingDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"buildingAcronym", n => { BuildingAcronym = n.GetStringValue(); } },
                {"buildingId", n => { BuildingId = n.GetGuidValue(); } },
                {"buildingName", n => { BuildingName = n.GetStringValue(); } },
                {"campusName", n => { CampusName = n.GetStringValue(); } },
                {"centerX", n => { CenterX = n.GetDoubleValue(); } },
                {"centerY", n => { CenterY = n.GetDoubleValue(); } },
                {"height", n => { Height = n.GetDoubleValue(); } },
                {"length", n => { Length = n.GetDoubleValue(); } },
                {"levelCount", n => { LevelCount = n.GetIntValue(); } },
                {"roofColor", n => { RoofColor = n.GetStringValue(); } },
                {"rotation", n => { Rotation = n.GetDoubleValue(); } },
                {"siteName", n => { SiteName = n.GetStringValue(); } },
                {"universityName", n => { UniversityName = n.GetStringValue(); } },
                {"wallsColor", n => { WallsColor = n.GetStringValue(); } },
                {"width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("buildingAcronym", BuildingAcronym);
            writer.WriteGuidValue("buildingId", BuildingId);
            writer.WriteStringValue("buildingName", BuildingName);
            writer.WriteStringValue("campusName", CampusName);
            writer.WriteDoubleValue("centerX", CenterX);
            writer.WriteDoubleValue("centerY", CenterY);
            writer.WriteDoubleValue("height", Height);
            writer.WriteDoubleValue("length", Length);
            writer.WriteIntValue("levelCount", LevelCount);
            writer.WriteStringValue("roofColor", RoofColor);
            writer.WriteDoubleValue("rotation", Rotation);
            writer.WriteStringValue("siteName", SiteName);
            writer.WriteStringValue("universityName", UniversityName);
            writer.WriteStringValue("wallsColor", WallsColor);
            writer.WriteDoubleValue("width", Width);
        }
    }
}

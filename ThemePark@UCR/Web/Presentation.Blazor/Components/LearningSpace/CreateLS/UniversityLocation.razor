@using UCR.ECCI.PI.ThemePark_UCR.ApplicationWeb.LearningArea.Services
@using UCR.ECCI.PI.ThemePark_UCR.ApplicationWeb.LearningSpace.Services.Interfaces
@using UCR.ECCI.PI.ThemePark_UCR.DomainWeb.LearningArea.Entities
@using UCR.ECCI.PI.ThemePark_UCR.DomainWeb.Shared.ValueObjects
@using static UCR.ECCI.PI.ThemePark_UCR.Presentation.Blazor.Pages.CreateLearningSpace
@inject ILearningSpaceCascadeService _cascade;
@inject ILevelService levelService;
@code {
    [Parameter] public LearningSpace LearningSpace { get; set; }
    [Parameter] public EventCallback<string> OnLevelChanged { get; set; }
    [Parameter] public bool dropdownDisabled { get; set; }
    public bool showCascade = true;
    public List<string> UniversityList = new List<string> { "Universidad de Costa Rica" };
    private IEnumerable<string>? CampusList;
    private IEnumerable<string>? SiteList;
    private IEnumerable<string>? BuildingList;
    private IEnumerable<Level>? LevelList;
    

    public async Task GetCampuses(string university)
    {
        CampusList = await _cascade.GetCampusFromUniversity(university);
        // Empty list of sites
        SiteList = Enumerable.Empty<string>();
        BuildingList = Enumerable.Empty<string>();
        LevelList = Enumerable.Empty<Level>();
    }

    private async Task GetSites(string campus)
    {
        // Get the list of sites
        SiteList = await _cascade.GetSitesFromCampus(campus);
        BuildingList = Enumerable.Empty<string>();
        LevelList = Enumerable.Empty<Level>();
    }

    private async Task GetBuildings(string site)
    {
        // Get buildings list
        Console.WriteLine("Busco edi {0}", site);
        Console.WriteLine("Campus: {0}", LearningSpace.Campus);
        BuildingList = await _cascade.GetBuilding(site, LearningSpace.Campus);
        // LevelList = Enumerable.Empty<Level>();
        foreach (var building in BuildingList)
        {
            Console.WriteLine("EDI: {0}", building);
        }
    }

    private async Task GetLevels(string building)
    {
        LevelList = await levelService.GetLevelsFromBuildingAsync(LongName.Create(LearningSpace.University),
        LongName.Create(LearningSpace.Campus), MediumName.Create(LearningSpace.SiteName), ShortName.Create(LearningSpace.BuildingAcronym));
    }
}

<div class="spacing">
    @* Onchange call the funcion GetCampuses and pass the selected value*@
    <BSInput InputType="BlazorStrap.InputType.Select" class="dropdown-CLS"
             @bind-Value="LearningSpace.University"
             @onchange="@(async (e) => {
                                        LearningSpace.University = e.Value.ToString();
                                        await OnLevelChanged.InvokeAsync();
                                        await GetCampuses(e.Value.ToString());
                                        })"
             IsDisabled="@dropdownDisabled">
        <option value="null"> Seleccione una Universidad</option>
        @* Insert here the list of colleges*@
        @foreach (var university in UniversityList)
        {
            <option value="@university">@university</option>
        }
    </BSInput>
</div>
<div class="spacing">
    <div class="spacing">

        <BSInput InputType="BlazorStrap.InputType.Select" class="dropdown-CLS"
                 @bind-Value="LearningSpace.Campus"
                 @onchange="@(async (e) => {
                                            LearningSpace.Campus = e.Value.ToString();
                                            await OnLevelChanged.InvokeAsync();
                                        await GetSites(e.Value.ToString());
                                })"
                 IsDisabled="@(CampusList == null || CampusList.Count() == 0 || dropdownDisabled)">
            <option value="null"> Seleccione el Campus</option>
            @* Insert here the list of campuses*@
            @if (CampusList != null)
            {
                @foreach (var campus in CampusList)
                {
                    <option value="@campus">@campus</option>
                }
            }
        </BSInput>

    </div>
    <div class="spacing">
        <BSInput InputType="BlazorStrap.InputType.Select" class="dropdown-CLS"
                 @bind-Value="LearningSpace.SiteName"
                 @onchange="@(async (e) => {
                                            LearningSpace.SiteName = e.Value.ToString();
                                            await OnLevelChanged.InvokeAsync();
                                            await GetBuildings(e.Value.ToString());
                                        })"
                 IsDisabled="@(SiteList == null || SiteList.Count() == 0 || dropdownDisabled)">
            <option value="null"> Seleccione la finca</option>
            @* Insert here the list of sites*@
            @if (SiteList != null)
            {
                @foreach (var site in SiteList)
                {
                    <option value="@site">@site</option>
                }
            }
        </BSInput>

    </div>
    <div class="spacing">
        <BSInput InputType="BlazorStrap.InputType.Select" class="dropdown-CLS"
                 @bind-Value="LearningSpace.BuildingAcronym"
                 @onchange="@(async (e) => {
                                            LearningSpace.BuildingAcronym = e.Value.ToString();
                                            await OnLevelChanged.InvokeAsync();
                                            await GetLevels(e.Value.ToString());
                                        })"
                 IsDisabled="@(BuildingList == null || BuildingList.Count() == 0 || dropdownDisabled)">
            <option value="null"> Seleccione el edificio</option>
            @* Insert here the list of sites*@
            @if (BuildingList != null)
            {
                @foreach (var building in BuildingList)
                {
                    <option value="@building">@building</option>
                }
            }
        </BSInput>

    </div>
    <div class="spacing">
        <BSInput InputType="BlazorStrap.InputType.Select" class="dropdown-CLS"
                 @bind-Value="LearningSpace.Level"
                 @onchange="@(async (e) => {
                                            LearningSpace.levelAsigned = true;
                                            LearningSpace.Level = new Guid(e.Value.ToString());
                                            await OnLevelChanged.InvokeAsync();

                                        })"
                 IsDisabled="@(LevelList == null || LevelList.Count() == 0 || dropdownDisabled)">
            <option value="null"> Seleccione el piso</option>
            @* Insert here the list of sites*@
            @if (LevelList != null)
            {
                @foreach (var level in LevelList)
                {
                    <option value="@level.LevelId.Value">@level.LevelNumber.Value</option>
                }
            }
        </BSInput>

    </div>


</div>

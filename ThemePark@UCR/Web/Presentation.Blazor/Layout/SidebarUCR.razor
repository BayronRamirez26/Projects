@using BlazorStrap
@using UCR.ECCI.PI.ThemePark_UCR.DomainWeb.Person.Entities
@inject CurrentNavigationUser currentNavigationUser;
@inject NavigationManager nav;
@inject LayoutStateService LayoutStateService

<link href="~/css/styles.css" rel="stylesheet" />

<div class="UCR_sidebar @(_isActive ? "active" : "")">
    <div class="top">
        <div class="logo">
            <span>Menú Principal</span>
        </div>
        <i class="bx bx-chevrons-left" id="btn" @onclick="ToggleSidebar"></i>
    </div>

    <ul>
        <li>
            <NavLink href="/">
                <i class='bx bx-home'></i>
                <span class="nav-item">Inicio</span>
            </NavLink>
        </li>
        <li>
            <div class="temporal-content">
                <a href="ShowActiveUsers">
                    <i class='bx bx-user'></i>
                    <span class="nav-item">Interacción</span>
                </a>
            </div>
            <BSDropdown class="dropdown-button">
                <Toggler>
                    <BSToggle IsButton="true" class="custom-dropdown">
                        <i class='bx bx-user'></i>
                        <span class="nav-item">Interacción</span>
                    </BSToggle>
                </Toggler>
                <Content>
                    @if (canCreate)
                    {
                        <a href="ShowActiveUsers">Usuarios activos</a>
                        <a href="ShowRoles">Ver Roles</a>
                        <a href="CreateRole">Crear Role</a>
                    }
                </Content>
            </BSDropdown>
        </li>
        <li>
            <div class="temporal-content">
                <a href="list-learningspaces">
                    <i class='bx bx-cube'></i>
                    <span class="nav-item">Interacción</span>
                </a>
            </div>
            <BSDropdown class="dropdown-button">
                <Toggler>
                    <BSToggle IsButton="true" class="custom-dropdown">
                        <i class='bx bx-cube'></i>
                        <span class="nav-item">Espacios</span>
                    </BSToggle>
                </Toggler>
                <Content>
                    @if (canCreate)
                    {
                        <a href="create-learningspaces">Crear Espacios</a>
                    }
                    <a href="list-learningspaces">Listar Espacios</a>
                    @if (canCreate)
                    {
                        <a href="create-learningspacetype">Crear Tipo</a>
                    }
                    <a href="list-learningspacetypes">Listar Tipo</a>
                    @if (canCreate)
                    {
                        <a href="create-template">Crear Plantilla</a>
                    }
                    <a href="list-templates">Listar Plantillas</a>
                </Content>
            </BSDropdown>
        </li>
        <li>
            <div class="temporal-content">
                <a href="/list-buildings">
                    <i class='bx bxs-buildings'></i>
                    <span class="nav-item">Zonas</span>
                </a>
            </div>
            <BSDropdown class="dropdown-button">
                <Toggler>
                    <BSToggle IsButton="true" class="custom-dropdown">
                        <i class='bx bxs-buildings'></i>
                        <span class="nav-item">Areas</span>
                    </BSToggle>
                </Toggler>
                <Content>
                    <a href="CreateBuilding">Crear Edificios</a>
                    <a href="list-buildings">Listar Edificios</a>
                </Content>
            </BSDropdown>
        </li>
        <li>
            <div class="temporal-content">
                <a href="/list-lcomponent">
                    <i class='bx bxs-chalkboard'></i>
                    <span class="nav-item">Componentes</span>
                </a>
            </div>
            <BSDropdown class="dropdown-button">
                <Toggler>
                    <BSToggle IsButton="true" class="custom-dropdown">
                        <i class='bx bx-chalkboard'></i>
                        <span class="nav-item">Componentes</span>
                    </BSToggle>
                </Toggler>
                <Content>
                    @if (canCreate)
                    {
                         <a href="/create-lcomponent">Crear Componentes de aprendizaje</a>
                    }
                    <a href="/list-lcomponent">Listar Componentes de aprendizaje</a>
                </Content>
            </BSDropdown>
        </li>
        <li>
            <div class="temporal-content">
                <a href="list-accesspoints">
                    <i class='bx bx-door-open'></i>
                    <span class="nav-item"></span>
                </a>
            </div>
            <BSDropdown class="dropdown-button">
                <Toggler>
                    <BSToggle IsButton="true" class="custom-dropdown">
                        <i class='bx bx-door-open'></i>
                        <span class="nav-item">Puntos de acceso</span>
                    </BSToggle>
                </Toggler>
                <Content>
                    <a href="create-accesspoint">Crear punto de acceso</a>
                    <a href="list-accesspoints">Listar puntos de acceso</a>
                </Content>
            </BSDropdown>
        </li>
    </ul>
    <div class="logo_container">
        <img src="assets/posible_Logo_2.png" alt="Logo UCR Theme Park" class="imagen_logo">
    </div>
</div>


@code {
    public bool canCreate;
    private string uniqueKey = Guid.NewGuid().ToString();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(5000);
        await currentNavigationUser.LoadUserAsync();
        Console.WriteLine("SE REFRESCA MAIN ********************************************************************");
        LayoutStateService.OnChange += StateHasChanged;
        Console.WriteLine("LA URI ES : XXXXXXXXXXXXXXXXXXXXX");
        Console.WriteLine(nav.Uri);
        canCreate = false;
        if (currentNavigationUser.CurrentUser != null)
        {
            foreach (var role in currentNavigationUser.CurrentUser.Roles)
            {
                foreach (var permission in role.Permissions)
                {
                    Console.WriteLine(permission.PermissionDescription.Value);
                    if (permission.PermissionDescription.Value == "Create")
                    {
                        Console.WriteLine("PUEDE CREAR");
                        canCreate = true;
                        StateHasChanged();
                    }
                    else
                    {
                        Console.WriteLine("NO PUEDE CREAR");
                        Console.WriteLine(permission.PermissionDescription.Value);
                    }
                }
            }

        }
        else
        {
            Console.WriteLine("NAV USER NULL");
        }
    }

    public void ForceReinitialize()
    {
        uniqueKey = Guid.NewGuid().ToString();
    }

    private bool _isActive;

    private void ToggleSidebar()
    {
        if (_isActive)
        {
            _isActive = false;
        }
        else
        {
            _isActive = true;
        }

    }

    public void Dispose()
    {
        LayoutStateService.OnChange -= StateHasChanged;
    }
}
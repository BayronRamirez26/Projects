// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Models {
    #pragma warning disable CS1591
    public class LevelDto : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The buildingAcronym property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? BuildingAcronym { get; set; }
#nullable restore
#else
        public string BuildingAcronym { get; set; }
#endif
        /// <summary>The campusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CampusName { get; set; }
#nullable restore
#else
        public string CampusName { get; set; }
#endif
        /// <summary>The ceilingAssetId property</summary>
        public Guid? CeilingAssetId { get; set; }
        /// <summary>The floorAssetId property</summary>
        public Guid? FloorAssetId { get; set; }
        /// <summary>The learningSpaceCount property</summary>
        public int? LearningSpaceCount { get; set; }
        /// <summary>The levelId property</summary>
        public Guid? LevelId { get; set; }
        /// <summary>The levelNumber property</summary>
        public int? LevelNumber { get; set; }
        /// <summary>The siteName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SiteName { get; set; }
#nullable restore
#else
        public string SiteName { get; set; }
#endif
        /// <summary>The sizeX property</summary>
        public double? SizeX { get; set; }
        /// <summary>The sizeY property</summary>
        public double? SizeY { get; set; }
        /// <summary>The sizeZ property</summary>
        public double? SizeZ { get; set; }
        /// <summary>The universityName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? UniversityName { get; set; }
#nullable restore
#else
        public string UniversityName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LevelDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LevelDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LevelDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"buildingAcronym", n => { BuildingAcronym = n.GetStringValue(); } },
                {"campusName", n => { CampusName = n.GetStringValue(); } },
                {"ceilingAssetId", n => { CeilingAssetId = n.GetGuidValue(); } },
                {"floorAssetId", n => { FloorAssetId = n.GetGuidValue(); } },
                {"learningSpaceCount", n => { LearningSpaceCount = n.GetIntValue(); } },
                {"levelId", n => { LevelId = n.GetGuidValue(); } },
                {"levelNumber", n => { LevelNumber = n.GetIntValue(); } },
                {"siteName", n => { SiteName = n.GetStringValue(); } },
                {"sizeX", n => { SizeX = n.GetDoubleValue(); } },
                {"sizeY", n => { SizeY = n.GetDoubleValue(); } },
                {"sizeZ", n => { SizeZ = n.GetDoubleValue(); } },
                {"universityName", n => { UniversityName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("buildingAcronym", BuildingAcronym);
            writer.WriteStringValue("campusName", CampusName);
            writer.WriteGuidValue("ceilingAssetId", CeilingAssetId);
            writer.WriteGuidValue("floorAssetId", FloorAssetId);
            writer.WriteIntValue("learningSpaceCount", LearningSpaceCount);
            writer.WriteGuidValue("levelId", LevelId);
            writer.WriteIntValue("levelNumber", LevelNumber);
            writer.WriteStringValue("siteName", SiteName);
            writer.WriteDoubleValue("sizeX", SizeX);
            writer.WriteDoubleValue("sizeY", SizeY);
            writer.WriteDoubleValue("sizeZ", SizeZ);
            writer.WriteStringValue("universityName", UniversityName);
        }
    }
}

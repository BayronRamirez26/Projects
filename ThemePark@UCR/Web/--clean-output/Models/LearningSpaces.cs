// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Models {
    #pragma warning disable CS1591
    public class LearningSpaces : IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>The ceilingColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? CeilingColor { get; set; }
#nullable restore
#else
        public MediumName CeilingColor { get; set; }
#endif
        /// <summary>The floorColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? FloorColor { get; set; }
#nullable restore
#else
        public MediumName FloorColor { get; set; }
#endif
        /// <summary>The learningSpaceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? LearningSpaceId { get; set; }
#nullable restore
#else
        public GuidWrapper LearningSpaceId { get; set; }
#endif
        /// <summary>The learningSpaceName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ShortName? LearningSpaceName { get; set; }
#nullable restore
#else
        public ShortName LearningSpaceName { get; set; }
#endif
        /// <summary>The levelId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? LevelId { get; set; }
#nullable restore
#else
        public GuidWrapper LevelId { get; set; }
#endif
        /// <summary>The sizeX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? SizeX { get; set; }
#nullable restore
#else
        public DoubleWrapper SizeX { get; set; }
#endif
        /// <summary>The sizeY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? SizeY { get; set; }
#nullable restore
#else
        public DoubleWrapper SizeY { get; set; }
#endif
        /// <summary>The sizeZ property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? SizeZ { get; set; }
#nullable restore
#else
        public DoubleWrapper SizeZ { get; set; }
#endif
        /// <summary>The type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? Type { get; set; }
#nullable restore
#else
        public MediumName Type { get; set; }
#endif
        /// <summary>The wallsColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? WallsColor { get; set; }
#nullable restore
#else
        public MediumName WallsColor { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="LearningSpaces"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static LearningSpaces CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new LearningSpaces();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"ceilingColor", n => { CeilingColor = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"floorColor", n => { FloorColor = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"learningSpaceId", n => { LearningSpaceId = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"learningSpaceName", n => { LearningSpaceName = n.GetObjectValue<ShortName>(ShortName.CreateFromDiscriminatorValue); } },
                {"levelId", n => { LevelId = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"sizeX", n => { SizeX = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"sizeY", n => { SizeY = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"sizeZ", n => { SizeZ = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"wallsColor", n => { WallsColor = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MediumName>("ceilingColor", CeilingColor);
            writer.WriteObjectValue<MediumName>("floorColor", FloorColor);
            writer.WriteObjectValue<GuidWrapper>("learningSpaceId", LearningSpaceId);
            writer.WriteObjectValue<ShortName>("learningSpaceName", LearningSpaceName);
            writer.WriteObjectValue<GuidWrapper>("levelId", LevelId);
            writer.WriteObjectValue<DoubleWrapper>("sizeX", SizeX);
            writer.WriteObjectValue<DoubleWrapper>("sizeY", SizeY);
            writer.WriteObjectValue<DoubleWrapper>("sizeZ", SizeZ);
            writer.WriteObjectValue<MediumName>("type", Type);
            writer.WriteObjectValue<MediumName>("wallsColor", WallsColor);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.CreateLevel {
    /// <summary>
    /// Builds and executes requests for operations under \create-level
    /// </summary>
    public class CreateLevelRequestBuilder : BaseRequestBuilder 
    {
        /// <summary>
        /// Instantiates a new <see cref="CreateLevelRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateLevelRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/create-level?buildingAcronym={buildingAcronym}&campusName={campusName}&learningSpacesCount={learningSpacesCount}&levelNumber={levelNumber}&siteName={siteName}&sizeX={sizeX}&sizeY={sizeY}&sizeZ={sizeZ}&universityName={universityName}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="CreateLevelRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public CreateLevelRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/create-level?buildingAcronym={buildingAcronym}&campusName={campusName}&learningSpacesCount={learningSpacesCount}&levelNumber={levelNumber}&siteName={siteName}&sizeX={sizeX}&sizeY={sizeY}&sizeZ={sizeZ}&universityName={universityName}", rawUrl)
        {
        }
        /// <returns>A <see cref="bool"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<bool?> PutAsync(Action<RequestConfiguration<CreateLevelRequestBuilderPutQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<bool?> PutAsync(Action<RequestConfiguration<CreateLevelRequestBuilderPutQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToPutRequestInformation(requestConfiguration);
            return await RequestAdapter.SendPrimitiveAsync<bool?>(requestInfo, default, cancellationToken).ConfigureAwait(false);
        }
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<CreateLevelRequestBuilderPutQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPutRequestInformation(Action<RequestConfiguration<CreateLevelRequestBuilderPutQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.PUT, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="CreateLevelRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public CreateLevelRequestBuilder WithUrl(string rawUrl)
        {
            return new CreateLevelRequestBuilder(rawUrl, RequestAdapter);
        }
        #pragma warning disable CS1591
        public class CreateLevelRequestBuilderPutQueryParameters 
        #pragma warning restore CS1591
        {
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("buildingAcronym")]
            public string? BuildingAcronym { get; set; }
#nullable restore
#else
            [QueryParameter("buildingAcronym")]
            public string BuildingAcronym { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("campusName")]
            public string? CampusName { get; set; }
#nullable restore
#else
            [QueryParameter("campusName")]
            public string CampusName { get; set; }
#endif
            [QueryParameter("learningSpacesCount")]
            public int? LearningSpacesCount { get; set; }
            [QueryParameter("levelNumber")]
            public int? LevelNumber { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("siteName")]
            public string? SiteName { get; set; }
#nullable restore
#else
            [QueryParameter("siteName")]
            public string SiteName { get; set; }
#endif
            [QueryParameter("sizeX")]
            public float? SizeX { get; set; }
            [QueryParameter("sizeY")]
            public float? SizeY { get; set; }
            [QueryParameter("sizeZ")]
            public float? SizeZ { get; set; }
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("universityName")]
            public string? UniversityName { get; set; }
#nullable restore
#else
            [QueryParameter("universityName")]
            public string UniversityName { get; set; }
#endif
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        public class CreateLevelRequestBuilderPutRequestConfiguration : RequestConfiguration<CreateLevelRequestBuilderPutQueryParameters> 
        {
        }
    }
}

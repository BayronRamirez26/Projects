// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.IS.ExampleProject.Infrastructure.ApiClient.Client.Models {
    public class Site : IParsable 
    {
        /// <summary>The campusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LongName? CampusName { get; set; }
#nullable restore
#else
        public LongName CampusName { get; set; }
#endif
        /// <summary>The siteName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? SiteName { get; set; }
#nullable restore
#else
        public MediumName SiteName { get; set; }
#endif
        /// <summary>The sizeX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Size? SizeX { get; set; }
#nullable restore
#else
        public Size SizeX { get; set; }
#endif
        /// <summary>The sizeY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Size? SizeY { get; set; }
#nullable restore
#else
        public Size SizeY { get; set; }
#endif
        /// <summary>The universityName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LongName? UniversityName { get; set; }
#nullable restore
#else
        public LongName UniversityName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Site"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Site CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Site();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"campusName", n => { CampusName = n.GetObjectValue<LongName>(LongName.CreateFromDiscriminatorValue); } },
                {"siteName", n => { SiteName = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"sizeX", n => { SizeX = n.GetObjectValue<Size>(Size.CreateFromDiscriminatorValue); } },
                {"sizeY", n => { SizeY = n.GetObjectValue<Size>(Size.CreateFromDiscriminatorValue); } },
                {"universityName", n => { UniversityName = n.GetObjectValue<LongName>(LongName.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<LongName>("campusName", CampusName);
            writer.WriteObjectValue<MediumName>("siteName", SiteName);
            writer.WriteObjectValue<Size>("sizeX", SizeX);
            writer.WriteObjectValue<Size>("sizeY", SizeY);
            writer.WriteObjectValue<LongName>("universityName", UniversityName);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.IS.ExampleProject.Infrastructure.ApiClient.Client.Models {
    public class Building : IParsable 
    {
        /// <summary>The buildingAcronym property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public ShortName? BuildingAcronym { get; set; }
#nullable restore
#else
        public ShortName BuildingAcronym { get; set; }
#endif
        /// <summary>The buildingName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LongName? BuildingName { get; set; }
#nullable restore
#else
        public LongName BuildingName { get; set; }
#endif
        /// <summary>The campusName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LongName? CampusName { get; set; }
#nullable restore
#else
        public LongName CampusName { get; set; }
#endif
        /// <summary>The centerX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Coordinate? CenterX { get; set; }
#nullable restore
#else
        public Coordinate CenterX { get; set; }
#endif
        /// <summary>The centerY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Coordinate? CenterY { get; set; }
#nullable restore
#else
        public Coordinate CenterY { get; set; }
#endif
        /// <summary>The length property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Size? Length { get; set; }
#nullable restore
#else
        public Size Length { get; set; }
#endif
        /// <summary>The levelCount property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Counter? LevelCount { get; set; }
#nullable restore
#else
        public Counter LevelCount { get; set; }
#endif
        /// <summary>The levels property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<Level>? Levels { get; set; }
#nullable restore
#else
        public List<Level> Levels { get; set; }
#endif
        /// <summary>The rotation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Angle? Rotation { get; set; }
#nullable restore
#else
        public Angle Rotation { get; set; }
#endif
        /// <summary>The siteName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? SiteName { get; set; }
#nullable restore
#else
        public MediumName SiteName { get; set; }
#endif
        /// <summary>The universityName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LongName? UniversityName { get; set; }
#nullable restore
#else
        public LongName UniversityName { get; set; }
#endif
        /// <summary>The width property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Size? Width { get; set; }
#nullable restore
#else
        public Size Width { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Building"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Building CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Building();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"buildingAcronym", n => { BuildingAcronym = n.GetObjectValue<ShortName>(ShortName.CreateFromDiscriminatorValue); } },
                {"buildingName", n => { BuildingName = n.GetObjectValue<LongName>(LongName.CreateFromDiscriminatorValue); } },
                {"campusName", n => { CampusName = n.GetObjectValue<LongName>(LongName.CreateFromDiscriminatorValue); } },
                {"centerX", n => { CenterX = n.GetObjectValue<Coordinate>(Coordinate.CreateFromDiscriminatorValue); } },
                {"centerY", n => { CenterY = n.GetObjectValue<Coordinate>(Coordinate.CreateFromDiscriminatorValue); } },
                {"length", n => { Length = n.GetObjectValue<Size>(Size.CreateFromDiscriminatorValue); } },
                {"levelCount", n => { LevelCount = n.GetObjectValue<Counter>(Counter.CreateFromDiscriminatorValue); } },
                {"levels", n => { Levels = n.GetCollectionOfObjectValues<Level>(Level.CreateFromDiscriminatorValue)?.ToList(); } },
                {"rotation", n => { Rotation = n.GetObjectValue<Angle>(Angle.CreateFromDiscriminatorValue); } },
                {"siteName", n => { SiteName = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"universityName", n => { UniversityName = n.GetObjectValue<LongName>(LongName.CreateFromDiscriminatorValue); } },
                {"width", n => { Width = n.GetObjectValue<Size>(Size.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<ShortName>("buildingAcronym", BuildingAcronym);
            writer.WriteObjectValue<LongName>("buildingName", BuildingName);
            writer.WriteObjectValue<LongName>("campusName", CampusName);
            writer.WriteObjectValue<Coordinate>("centerX", CenterX);
            writer.WriteObjectValue<Coordinate>("centerY", CenterY);
            writer.WriteObjectValue<Size>("length", Length);
            writer.WriteObjectValue<Counter>("levelCount", LevelCount);
            writer.WriteCollectionOfObjectValues<Level>("levels", Levels);
            writer.WriteObjectValue<Angle>("rotation", Rotation);
            writer.WriteObjectValue<MediumName>("siteName", SiteName);
            writer.WriteObjectValue<LongName>("universityName", UniversityName);
            writer.WriteObjectValue<Size>("width", Width);
        }
    }
}

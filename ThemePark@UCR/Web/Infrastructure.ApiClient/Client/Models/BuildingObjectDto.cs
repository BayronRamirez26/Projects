// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class BuildingObjectDto : IParsable 
    {
        /// <summary>The centerX property</summary>
        public double? CenterX { get; set; }
        /// <summary>The centerY property</summary>
        public double? CenterY { get; set; }
        /// <summary>The color1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color1 { get; set; }
#nullable restore
#else
        public string Color1 { get; set; }
#endif
        /// <summary>The color2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color2 { get; set; }
#nullable restore
#else
        public string Color2 { get; set; }
#endif
        /// <summary>The color3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color3 { get; set; }
#nullable restore
#else
        public string Color3 { get; set; }
#endif
        /// <summary>The colorAmount property</summary>
        public int? ColorAmount { get; set; }
        /// <summary>The height property</summary>
        public double? Height { get; set; }
        /// <summary>The length property</summary>
        public double? Length { get; set; }
        /// <summary>The levelId property</summary>
        public Guid? LevelId { get; set; }
        /// <summary>The objectId property</summary>
        public Guid? ObjectId { get; set; }
        /// <summary>The objectName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>The objectType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectType { get; set; }
#nullable restore
#else
        public string ObjectType { get; set; }
#endif
        /// <summary>The plane property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Plane { get; set; }
#nullable restore
#else
        public string Plane { get; set; }
#endif
        /// <summary>The rotation property</summary>
        public double? Rotation { get; set; }
        /// <summary>The wallId property</summary>
        public int? WallId { get; set; }
        /// <summary>The width property</summary>
        public double? Width { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BuildingObjectDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BuildingObjectDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BuildingObjectDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"centerX", n => { CenterX = n.GetDoubleValue(); } },
                {"centerY", n => { CenterY = n.GetDoubleValue(); } },
                {"color1", n => { Color1 = n.GetStringValue(); } },
                {"color2", n => { Color2 = n.GetStringValue(); } },
                {"color3", n => { Color3 = n.GetStringValue(); } },
                {"colorAmount", n => { ColorAmount = n.GetIntValue(); } },
                {"height", n => { Height = n.GetDoubleValue(); } },
                {"length", n => { Length = n.GetDoubleValue(); } },
                {"levelId", n => { LevelId = n.GetGuidValue(); } },
                {"objectId", n => { ObjectId = n.GetGuidValue(); } },
                {"objectName", n => { ObjectName = n.GetStringValue(); } },
                {"objectType", n => { ObjectType = n.GetStringValue(); } },
                {"plane", n => { Plane = n.GetStringValue(); } },
                {"rotation", n => { Rotation = n.GetDoubleValue(); } },
                {"wallId", n => { WallId = n.GetIntValue(); } },
                {"width", n => { Width = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteDoubleValue("centerX", CenterX);
            writer.WriteDoubleValue("centerY", CenterY);
            writer.WriteStringValue("color1", Color1);
            writer.WriteStringValue("color2", Color2);
            writer.WriteStringValue("color3", Color3);
            writer.WriteIntValue("colorAmount", ColorAmount);
            writer.WriteDoubleValue("height", Height);
            writer.WriteDoubleValue("length", Length);
            writer.WriteGuidValue("levelId", LevelId);
            writer.WriteGuidValue("objectId", ObjectId);
            writer.WriteStringValue("objectName", ObjectName);
            writer.WriteStringValue("objectType", ObjectType);
            writer.WriteStringValue("plane", Plane);
            writer.WriteDoubleValue("rotation", Rotation);
            writer.WriteIntValue("wallId", WallId);
            writer.WriteDoubleValue("width", Width);
        }
    }
}

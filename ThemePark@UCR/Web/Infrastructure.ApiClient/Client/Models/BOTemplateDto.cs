// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class BOTemplateDto : IParsable 
    {
        /// <summary>The color1Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color1Name { get; set; }
#nullable restore
#else
        public string Color1Name { get; set; }
#endif
        /// <summary>The color2Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color2Name { get; set; }
#nullable restore
#else
        public string Color2Name { get; set; }
#endif
        /// <summary>The color3Name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Color3Name { get; set; }
#nullable restore
#else
        public string Color3Name { get; set; }
#endif
        /// <summary>The colorAmount property</summary>
        public int? ColorAmount { get; set; }
        /// <summary>The defaultColor1 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultColor1 { get; set; }
#nullable restore
#else
        public string DefaultColor1 { get; set; }
#endif
        /// <summary>The defaultColor2 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultColor2 { get; set; }
#nullable restore
#else
        public string DefaultColor2 { get; set; }
#endif
        /// <summary>The defaultColor3 property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DefaultColor3 { get; set; }
#nullable restore
#else
        public string DefaultColor3 { get; set; }
#endif
        /// <summary>The defaultHeight property</summary>
        public double? DefaultHeight { get; set; }
        /// <summary>The defaultLength property</summary>
        public double? DefaultLength { get; set; }
        /// <summary>The defaultWidth property</summary>
        public double? DefaultWidth { get; set; }
        /// <summary>The objectName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectName { get; set; }
#nullable restore
#else
        public string ObjectName { get; set; }
#endif
        /// <summary>The objectType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ObjectType { get; set; }
#nullable restore
#else
        public string ObjectType { get; set; }
#endif
        /// <summary>The plane property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Plane { get; set; }
#nullable restore
#else
        public string Plane { get; set; }
#endif
        /// <summary>The templateId property</summary>
        public Guid? TemplateId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="BOTemplateDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static BOTemplateDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new BOTemplateDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"color1Name", n => { Color1Name = n.GetStringValue(); } },
                {"color2Name", n => { Color2Name = n.GetStringValue(); } },
                {"color3Name", n => { Color3Name = n.GetStringValue(); } },
                {"colorAmount", n => { ColorAmount = n.GetIntValue(); } },
                {"defaultColor1", n => { DefaultColor1 = n.GetStringValue(); } },
                {"defaultColor2", n => { DefaultColor2 = n.GetStringValue(); } },
                {"defaultColor3", n => { DefaultColor3 = n.GetStringValue(); } },
                {"defaultHeight", n => { DefaultHeight = n.GetDoubleValue(); } },
                {"defaultLength", n => { DefaultLength = n.GetDoubleValue(); } },
                {"defaultWidth", n => { DefaultWidth = n.GetDoubleValue(); } },
                {"objectName", n => { ObjectName = n.GetStringValue(); } },
                {"objectType", n => { ObjectType = n.GetStringValue(); } },
                {"plane", n => { Plane = n.GetStringValue(); } },
                {"templateId", n => { TemplateId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("color1Name", Color1Name);
            writer.WriteStringValue("color2Name", Color2Name);
            writer.WriteStringValue("color3Name", Color3Name);
            writer.WriteIntValue("colorAmount", ColorAmount);
            writer.WriteStringValue("defaultColor1", DefaultColor1);
            writer.WriteStringValue("defaultColor2", DefaultColor2);
            writer.WriteStringValue("defaultColor3", DefaultColor3);
            writer.WriteDoubleValue("defaultHeight", DefaultHeight);
            writer.WriteDoubleValue("defaultLength", DefaultLength);
            writer.WriteDoubleValue("defaultWidth", DefaultWidth);
            writer.WriteStringValue("objectName", ObjectName);
            writer.WriteStringValue("objectType", ObjectType);
            writer.WriteStringValue("plane", Plane);
            writer.WriteGuidValue("templateId", TemplateId);
        }
    }
}

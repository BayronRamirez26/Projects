// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class StudentDto : IParsable 
    {
        /// <summary>The isActive property</summary>
        public bool? IsActive { get; set; }
        /// <summary>The personId property</summary>
        public Guid? PersonId { get; set; }
        /// <summary>The studentCard property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? StudentCard { get; set; }
#nullable restore
#else
        public string StudentCard { get; set; }
#endif
        /// <summary>The studentId property</summary>
        public Guid? StudentId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="StudentDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static StudentDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new StudentDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"isActive", n => { IsActive = n.GetBoolValue(); } },
                {"personId", n => { PersonId = n.GetGuidValue(); } },
                {"studentCard", n => { StudentCard = n.GetStringValue(); } },
                {"studentId", n => { StudentId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("isActive", IsActive);
            writer.WriteGuidValue("personId", PersonId);
            writer.WriteStringValue("studentCard", StudentCard);
            writer.WriteGuidValue("studentId", StudentId);
        }
    }
}

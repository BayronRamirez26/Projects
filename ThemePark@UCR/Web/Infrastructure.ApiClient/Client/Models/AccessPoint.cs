// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class AccessPoint : IParsable 
    {
        /// <summary>The accessPointId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? AccessPointId { get; set; }
#nullable restore
#else
        public GuidWrapper AccessPointId { get; set; }
#endif
        /// <summary>The coordX property</summary>
        public double? CoordX { get; set; }
        /// <summary>The coordY property</summary>
        public double? CoordY { get; set; }
        /// <summary>The coordZ property</summary>
        public double? CoordZ { get; set; }
        /// <summary>The learningSpace property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public LearningSpaces? LearningSpace { get; set; }
#nullable restore
#else
        public LearningSpaces LearningSpace { get; set; }
#endif
        /// <summary>The learningSpaceId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? LearningSpaceId { get; set; }
#nullable restore
#else
        public GuidWrapper LearningSpaceId { get; set; }
#endif
        /// <summary>The levelId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? LevelId { get; set; }
#nullable restore
#else
        public GuidWrapper LevelId { get; set; }
#endif
        /// <summary>The rotationX property</summary>
        public double? RotationX { get; set; }
        /// <summary>The rotationY property</summary>
        public double? RotationY { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="AccessPoint"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static AccessPoint CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new AccessPoint();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"accessPointId", n => { AccessPointId = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"coordX", n => { CoordX = n.GetDoubleValue(); } },
                {"coordY", n => { CoordY = n.GetDoubleValue(); } },
                {"coordZ", n => { CoordZ = n.GetDoubleValue(); } },
                {"learningSpace", n => { LearningSpace = n.GetObjectValue<LearningSpaces>(LearningSpaces.CreateFromDiscriminatorValue); } },
                {"learningSpaceId", n => { LearningSpaceId = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"levelId", n => { LevelId = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"rotationX", n => { RotationX = n.GetDoubleValue(); } },
                {"rotationY", n => { RotationY = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<GuidWrapper>("accessPointId", AccessPointId);
            writer.WriteDoubleValue("coordX", CoordX);
            writer.WriteDoubleValue("coordY", CoordY);
            writer.WriteDoubleValue("coordZ", CoordZ);
            writer.WriteObjectValue<LearningSpaces>("learningSpace", LearningSpace);
            writer.WriteObjectValue<GuidWrapper>("learningSpaceId", LearningSpaceId);
            writer.WriteObjectValue<GuidWrapper>("levelId", LevelId);
            writer.WriteDoubleValue("rotationX", RotationX);
            writer.WriteDoubleValue("rotationY", RotationY);
        }
    }
}

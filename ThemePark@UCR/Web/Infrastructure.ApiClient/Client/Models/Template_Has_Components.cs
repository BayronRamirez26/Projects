// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace UCR.ECCI.PI.ThemePark_UCR.Infrastructure.ApiClient.Client.Models {
    public class Template_Has_Components : IParsable 
    {
        /// <summary>The component_type property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public MediumName? ComponentType { get; set; }
#nullable restore
#else
        public MediumName ComponentType { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? Id { get; set; }
#nullable restore
#else
        public GuidWrapper Id { get; set; }
#endif
        /// <summary>The positionX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? PositionX { get; set; }
#nullable restore
#else
        public DoubleWrapper PositionX { get; set; }
#endif
        /// <summary>The positionY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? PositionY { get; set; }
#nullable restore
#else
        public DoubleWrapper PositionY { get; set; }
#endif
        /// <summary>The positionZ property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? PositionZ { get; set; }
#nullable restore
#else
        public DoubleWrapper PositionZ { get; set; }
#endif
        /// <summary>The rotationX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? RotationX { get; set; }
#nullable restore
#else
        public DoubleWrapper RotationX { get; set; }
#endif
        /// <summary>The rotationY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? RotationY { get; set; }
#nullable restore
#else
        public DoubleWrapper RotationY { get; set; }
#endif
        /// <summary>The sizeX property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? SizeX { get; set; }
#nullable restore
#else
        public DoubleWrapper SizeX { get; set; }
#endif
        /// <summary>The sizeY property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public DoubleWrapper? SizeY { get; set; }
#nullable restore
#else
        public DoubleWrapper SizeY { get; set; }
#endif
        /// <summary>The template property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public GuidWrapper? Template { get; set; }
#nullable restore
#else
        public GuidWrapper Template { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Template_Has_Components"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Template_Has_Components CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Template_Has_Components();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"component_type", n => { ComponentType = n.GetObjectValue<MediumName>(MediumName.CreateFromDiscriminatorValue); } },
                {"id", n => { Id = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
                {"positionX", n => { PositionX = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"positionY", n => { PositionY = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"positionZ", n => { PositionZ = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"rotationX", n => { RotationX = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"rotationY", n => { RotationY = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"sizeX", n => { SizeX = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"sizeY", n => { SizeY = n.GetObjectValue<DoubleWrapper>(DoubleWrapper.CreateFromDiscriminatorValue); } },
                {"template", n => { Template = n.GetObjectValue<GuidWrapper>(GuidWrapper.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<MediumName>("component_type", ComponentType);
            writer.WriteObjectValue<GuidWrapper>("id", Id);
            writer.WriteObjectValue<DoubleWrapper>("positionX", PositionX);
            writer.WriteObjectValue<DoubleWrapper>("positionY", PositionY);
            writer.WriteObjectValue<DoubleWrapper>("positionZ", PositionZ);
            writer.WriteObjectValue<DoubleWrapper>("rotationX", RotationX);
            writer.WriteObjectValue<DoubleWrapper>("rotationY", RotationY);
            writer.WriteObjectValue<DoubleWrapper>("sizeX", SizeX);
            writer.WriteObjectValue<DoubleWrapper>("sizeY", SizeY);
            writer.WriteObjectValue<GuidWrapper>("template", Template);
        }
    }
}
